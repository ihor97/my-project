git- система управління версіями

переваги
- швидкий перехід між версіями
-зберігає різні версії
-відкат до пепередніх версій 

github- сервіс хостінга git репозиторіїв
на кожному компютері знаходиться повна версія репозиторія 
можна працєвати з git локально на навіть без інтернету

git --version

2.36.0  36 мінорна версія 0 -патч

git config --global user.name ihor97
git config --global user.email ihor97

git config --list


робота з терміналом
cd my-project перехід в папку
mkdir my-project створення папки
echo "file txt"> file.txt створення файлу з наповненням
ls список файлів в папці
del file.txt видалення файлу

git init створення нового git репозиторія
потім створюється скрита папка  .git
репозиторій git це і є папка .git

ls -Force показує всі папки разом зі скритими у powershell


3 області git
-робоча директорія(де лежать видимі файли видима частина)
-index(staging area)(сюди добавляються файли які ми хочемо зберегти)
-repository(в папці objects зберігаються всі версії проекту(обєкти git) )

index repository скриті

git status  показує ті зміни в staging area або в working directory 


назви в objects грунтуються на хешах 

в репозиторії гіт зберігаються різні версії файлів у вигляді зовсім різних обєктів

                                                        робочий процес гіт
підготовка до збереження в індекс git add . - добавляє всі зміни в робочій директорії 
git commit збереження змін commit вказує на нову версію 

git checkout перехід до певної версії, відбувається переміщення файлів з репозиторія в робочу директорію

                                статус відсліжування 
untracked -новий файл де незбережені зміни
staged- файли які добавили в індекс 
unmodified - коли файли в робочій директорії і в репозиторії не відрізняються(це момент коли ми з індекса перекинули в репозиторій)
modified - модифіковані файли

                                                Обєкти гіт
Blob-обєкти які створюються для файлів 
tree - такі обєкти в гіт представляють папки зберігає силки на папки підпапки 
commit -створюється тоді коли ми зберігаємо текучу версію проекту
annotated tag-можна переходити ро тегу

кожний обєкт має свій id (sha1 хеш)
назви основані на id

коміт вказувач на дерево
дерево це те як гіт представляє кожну папку

як гіт зберінає дану версію проекту в гіт репозиторії 

папка- tree, файли-Blob 
корнева папка - головна папка 

гіт створює при коміті дерева і блоби в репозиторії які мають свої хеші що будуть потім збережені в репозиторії

в різних версіях однакові папки мають різні хеші і тому можуть бути різними

                                                                дані в коміті
-хеш коміту
-імя та емейл автора
-описання коміту
-має силку на дерево
-так як дерево є обєктом гіт то він має теж свій хеш
-має силку на один або декілька батьківських комітів 

перший коміт - корнеаий коміт
другий коміт буде ссилатися на корневий 
гіт має деякий вказівник (він ссилаєтсья на певний коміт ) head(вказує на даний коміт якщо ми його перемістимо на нього)
head дає змогу переміщатися в історії комітів
head вказує на певну гілку (по замовчуванню main а вже гілка ссилається на коміт)
при створенні нового комітку head ссилається на актуальний і переміщається автоматично туди


при коміті створюється дерево в корні цього дерева є корнева папка

id генеруються на основі вмісту файлів
 
якщо вміст якоїсь папки не мінявся  то при коміті id може не мінятися і два коміта можуть ссилатися на цю папку з однаковими id

git status -показує даний стан git репозиторія
git add - підготовка файлів до коміту(добавлення в індекс)
git commit -m "message" створення коміта з записом змін в репозиторію
git log -історія змін показує всі коміти
git checkout <commit hash> перехід до певного коміту і переміщення head 
git checkout <branch name> перехід до гілки

cd ../..

git checkout переміщує head на бажаний коміт

коли HEAD вказує на коміт а не на вітку master то він перебуває в стані detached head


                                    гілки в гіт
гілка - силка на деякий коміт

git checkout feature1 переміщення по гілках

git branch <branch name> створення гілки 

git checkout <branch name> перехід до гілки

git checkout -b <name> створення і перехід до гілки 

git branch показує усі гілки 

git branch -m <new branch > перейменування гілки

git branch -d <branch name> видалення гілки






















